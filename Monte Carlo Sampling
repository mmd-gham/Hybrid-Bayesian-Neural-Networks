#Perform multiple stochastic forward passes and average the predictions.


def compute_mc_predictions(model, x, num_samples=200):

    sampled_predictions = np.array([
        model(x).mean().numpy() for _ in range(num_samples)
    ])  

    mean_probs = np.mean(sampled_predictions, axis=0)  
    predicted_labels = np.argmax(mean_probs, axis=1)  
    return predicted_labels, mean_probs


def evaluate_model(model, X_test, y_test, num_samples=200):
    predicted_labels, mean_probs = compute_mc_predictions(model, X_test, num_samples)

    if y_test.ndim > 1:
        y_test = np.argmax(y_test, axis=1)

    accuracy = accuracy_score(y_test, predicted_labels)
    precision = precision_score(y_test, predicted_labels, average='weighted')
    recall = recall_score(y_test, predicted_labels, average='weighted')
    f1 = f1_score(y_test, predicted_labels, average='weighted')

    print(f"Accuracy: {accuracy:.4f}")
    print(f"Precision: {precision:.4f}")
    print(f"Recall: {recall:.4f}")
    print(f"F1 Score: {f1:.4f}")

    return accuracy, precision, recall, f1


evaluate_model(bayesian_model, X_test, y_test_oh, num_samples=200)
